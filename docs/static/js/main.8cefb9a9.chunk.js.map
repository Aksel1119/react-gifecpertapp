{"version":3,"sources":["Component/AddCategory.js","helpers/getGifs.js","Component/GifGridItem.js","Component/GifGrid.js","hooks/useFetchGifs.js","Component/GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGif","categoria","a","url","encodeURI","fetch","resp","json","data","gif","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","imagenes","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMA+BeA,MA5Bf,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAkBpC,OACI,sBAAMC,SAXS,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBL,EAAc,IACdH,GAAc,SAAAS,GAAG,OAAMP,GAAN,mBAAoBO,SAMzC,SACI,uBAAOC,KAAK,OACXC,MAAOT,EACPU,SAlBgB,SAACP,GACtBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAM,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DAEXC,EAFW,0FAE4EC,UAAUH,GAFtF,sBAICI,MAAOF,GAJR,cAIXG,EAJW,gBAKIA,EAAKC,OALT,uBAKVC,EALU,EAKVA,KAEDC,EAAKD,EAAKE,KAAK,SAAAC,GACjB,MAAO,CAACC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAV5B,kBAaVM,GAbU,4CAAF,sDCaJO,MAZf,YAA0C,IAAnBb,EAAkB,EAAlBA,IAAKU,EAAa,EAAbA,MAGxB,OAHqC,EAAND,GAI3B,sBAAKK,UAAU,iDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IAEpB,4BAAIA,QCkBDO,MAvBf,YAAiC,IAAdnB,EAAa,EAAbA,UAAa,ECDL,SAAEA,GAAe,IAAD,EAEjBd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJ8B,mBAEpCC,EAFoC,KAE7BC,EAF6B,KAkB3C,OAXAC,qBAAW,WAEPxB,EAAQC,GACPwB,MAAM,SAAAd,GACHY,EAAS,CACLf,KAAKG,EACLU,SAAS,SAGb,CAACpB,IAEFqB,EDfyBI,CAAczB,GAAlC0B,EAFoB,EAEzBnB,KAAea,EAFU,EAEVA,QAGlB,OACI,qCACC,oBAAIJ,UAAU,gDAAd,SAA+DhB,IAE9DoB,GAAU,mBAAGJ,UAAU,wCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAESU,EAASjB,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEY3BgB,MA1Bf,WAAyB,IAAD,EAGYzC,mBAAS,CAAC,gBAHtB,mBAGjB0C,EAHiB,KAGL3C,EAHK,KASpB,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACK2C,EAAWnB,KAAK,SAACT,GAAD,OACb,cAAC,EAAD,CAAyBA,UAAWA,GAAtBA,Y,MChBlC6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.8cefb9a9.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nfunction AddCategory( {setCategorias} ) {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange= (e) =>{\r\n        setInputValue( e.target.value);\r\n    }\r\n\r\n    const handleSumbit=(e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length>2){\r\n            setInputValue('');\r\n            setCategorias(cat => [ inputValue,...cat] );\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSumbit}>\r\n            <input type='text'\r\n             value={inputValue}\r\n             onChange={ handleInputChange }\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddCategory\r\n","\r\nexport const getGif= async (categoria) =>{\r\n\r\n    const url=`https://api.giphy.com/v1/gifs/search?api_key=aWEhzJXCllHt2AQAUBgaAI2MenJwUkfC&q=${encodeURI(categoria)}&limit=10`;\r\n\r\n    const resp =await fetch( url);\r\n    const {data} = await resp.json();\r\n\r\n    const gif= data.map( img =>{\r\n        return {id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url}\r\n    });\r\n\r\n    return gif;\r\n}","import React from 'react'\r\n\r\nfunction GifGridItem( {url ,title, id} ) {\r\n\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__fadeInRightBig'>\r\n            <img src={url} alt={title}/>\r\n\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nfunction GifGrid( {categoria} ) {\r\n\r\nconst {data:imagenes, loading}= useFetchGifs( categoria);\r\n\r\n\r\n    return (\r\n        <>\r\n         <h3 className='card animate__animated animate__fadeInLeftBig'>{categoria}</h3>\r\n\r\n         {loading &&<p className='card animate__animated animate__flash'>loading</p>}\r\n        \r\n        <div className='card-grid'>\r\n\r\n                {imagenes.map((img )=>(\r\n                    <GifGridItem key={img.id} {...img}/>\r\n                ))\r\n                }\r\n           \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import {useState, useEffect} from 'react'\r\nimport { getGif } from '../helpers/getGifs';\r\n\r\nexport const  useFetchGifs=( categoria) => {\r\n   \r\nconst [state, setstate] = useState({\r\n    data:[],\r\n    loading: true\r\n});  \r\n\r\nuseEffect( () =>{\r\n    \r\n    getGif( categoria)\r\n    .then( img =>{\r\n        setstate({\r\n            data:img,\r\n            loading: false\r\n        });\r\n    })\r\n     }, [categoria])\r\n\r\nreturn state;\r\n\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\nfunction GifExpertApp() {\r\n\r\n\r\nconst [categorias, setCategorias] = useState(['Dragon-Ball']);\r\n\r\n// const handleAdd = () =>{\r\n//   setCategorias( [...categorias, 'Nuevo item'] );\r\n// }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias={setCategorias} />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {categorias.map( (categoria) =>(\r\n                    <GifGrid key={categoria} categoria={categoria}/>\r\n                   \r\n                ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './Component/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}